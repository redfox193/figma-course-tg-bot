import logging
import re
from typing import Any

import requests
from aiogram import Bot, Router, types
from aiogram.dispatcher.middlewares.user_context import EventContext
from aiogram.enums import ParseMode
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, ContentType, Message
from aiogram_dialog import Dialog, DialogManager, StartMode, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import (Back, Button, Cancel, Column, Row,
                                        ScrollingGroup, Select, Url)
from aiogram_dialog.widgets.text import Const, Format
from requests import HTTPError
from requests.exceptions import ConnectionError

import settings
from shared import AccessMiddleware, Role, format_symbols
from utils import del_from_redis, slugify, stringify

router = Router()
router.message.middleware(AccessMiddleware(role=Role.TUTOR))


class CheckHw(StatesGroup):
    view_students = State()
    homeworks_list = State()
    students_to_check = State()
    hws_to_check = State()


async def make_request(url, bot: Bot, dialog_manager: DialogManager, event_context: EventContext, data=None):
    try:
        response = requests.get(url, data=data)
        response.raise_for_status()
        return response
    except ConnectionError as error:
        logging.error(error)
        await bot.send_message(chat_id=event_context.chat_id, text="–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî\n"
                                                                   f"–ù–∞–ø–∏—à–∏ {settings.ADMIN}.")
        return None
    except HTTPError as error:
        logging.error(error)
        await bot.send_message(chat_id=event_context.chat_id, text=f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò≥. "
                                                                   f"–ù–∞–ø–∏—à–∏ {settings.ADMIN}.")
        await dialog_manager.done()
        return None


async def make_request_(url, message: Message, dialog_manager: DialogManager = None, data=None):
    try:
        response = requests.get(url, data=data)
        response.raise_for_status()
        return response
    except ConnectionError as error:
        logging.error(error)
        await message.answer(f"–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî\n–ù–∞–ø–∏—à–∏ {settings.ADMIN}.")
        if dialog_manager:
            await dialog_manager.done()
        return None
    except HTTPError as error:
        logging.error(error)
        await message.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò≥. –ù–∞–ø–∏—à–∏ {settings.ADMIN}.")
        if dialog_manager:
            await dialog_manager.done()
        return None


def format_hws_info_for_dialog(hws_info: list):
    result = []
    for id_, url, mark in hws_info:
        if url:
            if mark > 0:
                text = f"{format_symbols[id_]} | {format_symbols['checked']} | –æ—Ü–µ–Ω–∫–∞: {mark}"
            else:
                text = f"{format_symbols[id_]} | {format_symbols['not_checked']}"
        else:
            text = f"{format_symbols[id_]} | –Ω–µ —Å–¥–∞–Ω–æ"
            url = "https://www.figma.com/"
        result.append({"text": text, "url": url})
    return {
        'hws_info': result,
    }


async def students_getter(bot: Bot, dialog_manager: DialogManager, event_context: EventContext, **kwargs):
    '''–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —á–∏—Å–ª—è—â–∏—Ö—Å—è –∑–∞ –º–µ–Ω—Ç–æ—Ä–æ–º'''

    tutor_username = event_context.user.username
    response = await make_request(settings.BACKEND_URL + f"/{slugify(tutor_username)}/students", bot, dialog_manager,
                                  event_context)
    if not response:
        return

    students = response.json()
    students_list = []
    for student in students:
        students_list.append(stringify(student['username']))

    return {
        'students_list': students_list
    }


async def homework_to_check_getter(bot: Bot, dialog_manager: DialogManager, event_context: EventContext, **kwargs):
    '''–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∑ –≤–º–µ—Å—Ç–µ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–∑, –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∏—Ö –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã'''

    tutor_username = event_context.user.username
    response = await make_request(settings.BACKEND_URL + f"/{slugify(tutor_username)}/groupedhwinfo", bot,
                                  dialog_manager,
                                  event_context)

    tasks = response.json()
    homeworks_to_check = [[i + 1, format_symbols[i + 1], "0üèñ"] for i in range(settings.TASKS)]
    for task in tasks:
        if task['kol']:
            homeworks_to_check[task['task_id'] - 1][2] = task['kol']

    return {
        'homeworks_list': homeworks_to_check
    }


async def on_homework_chosen(callback: CallbackQuery, widget: Any, dialog_manager: DialogManager, homework: str):
    dialog_manager.dialog_data['chosen_homework'] = homework
    dialog_manager.dialog_data['chosen_homework_format'] = format_symbols[int(homework)]
    await dialog_manager.switch_to(CheckHw.students_to_check)


async def students_by_hw_getter(bot: Bot, dialog_manager: DialogManager, event_context: EventContext, **kwargs):
    '''–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —á–∏—Å–ª—è—â–∏—Ö—Å—è –∑–∞ –º–µ–Ω—Ç–æ—Ä–æ–º'''

    tutor_username = event_context.user.username
    hw_id = int(dialog_manager.dialog_data['chosen_homework'])
    response = await make_request(settings.BACKEND_URL + f"/{slugify(tutor_username)}/students/{hw_id}", bot,
                                  dialog_manager,
                                  event_context)

    students = response.json()
    students_list = []
    for student in students:
        students_list.append(stringify(student['username']))

    return {
        'students_list': students_list
    }


async def on_student_chosen(callback: CallbackQuery, widget: Any, dialog_manager: DialogManager, student_username: str):
    dialog_manager.dialog_data['chosen_student'] = student_username
    await dialog_manager.switch_to(CheckHw.hws_to_check)


async def chosen_student_hw_getter(bot: Bot, dialog_manager: DialogManager, event_context: EventContext, **kwargs):
    student_username = dialog_manager.dialog_data['chosen_student']  # –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–¥
    response = await make_request(settings.BACKEND_URL + f"/{slugify(student_username)}/homeworks", bot, dialog_manager,
                                  event_context)

    homeworks = response.json()
    hws_info = [[i + 1, "", -1] for i in range(settings.TASKS)]
    for homework in homeworks:
        hws_info[homework['task'] - 1][1] = homework['url']
        mark = homework['mark']
        hws_info[homework['task'] - 1][2] = mark if mark is not None else -1

    return format_hws_info_for_dialog(hws_info)


async def check_hw_handler(message: Message, message_input: MessageInput, dialog_manager: DialogManager):
    text = message.text
    send_mark_pattern = r'^(\d+)\s+((10|[0-9](\.\d+)?))$'
    student_username = dialog_manager.dialog_data['chosen_student']

    response = await make_request_(settings.BACKEND_URL + f"/{slugify(student_username)}/homeworks", message,
                                   dialog_manager)
    if not response:
        return

    homeworks = response.json()
    available_homeworks = []
    for homework in homeworks:
        available_homeworks.append(homework['task'])

    match = re.match(send_mark_pattern, text)
    if not match:
        await message.answer("–§–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–µ–≤–µ—Ä–µ–Ωüòî.\n\n"
                             "–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å –æ—Ü–µ–Ω–∫—É –µ—â—ë —Ä–∞–∑.\n"
                             "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                             "<i>3 3.25</i>\n", parse_mode=ParseMode.HTML)
        return

    hw_num = int(match.group(1))
    if hw_num not in available_homeworks:
        await message.answer(f"–§–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–µ–≤–µ—Ä–µ–Ωüòî, <b>@{student_username}</b> "
                             f"–µ—â—ë –Ω–µ —Å–¥–∞–≤–∞–ª –¥–∑ {format_symbols[hw_num]}\n\n"
                             "–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å –æ—Ü–µ–Ω–∫—É –µ—â—ë —Ä–∞–∑.\n"
                             "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                             "<i>3 3.25</i>\n", parse_mode=ParseMode.HTML)
        return

    hw_mark = float(match.group(2))
    if hw_mark < 0 or hw_mark > 10:
        await message.answer(f"–§–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–µ–≤–µ—Ä–µ–Ωüòî, –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10.\n\n"
                             "–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å –æ—Ü–µ–Ω–∫—É –µ—â—ë —Ä–∞–∑.\n"
                             "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                             "<i>3 3.25</i>\n", parse_mode=ParseMode.HTML)
        return

    try:
        response = requests.put(settings.BACKEND_URL + f"/{slugify(student_username)}/checkhw",
                                data={
                                    "task": hw_num,
                                    "mark": hw_mark
                                })
        response.raise_for_status()
    except ConnectionError as error:
        logging.error(error)
        await message.answer(f"–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî\n–ù–∞–ø–∏—à–∏ {settings.ADMIN}.")
        await dialog_manager.done()
        return None
    except HTTPError as error:
        logging.error(error)
        await message.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò≥. –ù–∞–ø–∏—à–∏ {settings.ADMIN}.")
        await dialog_manager.done()
        return None

    hw_info = response.json()
    await message.answer(f"–î–∑ {format_symbols[hw_info['task']]} –æ—Ç "
                         f"<b>@{stringify(hw_info['username'])}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ü–µ–Ω–µ–Ω–æ –Ω–∞ <b>{hw_info['mark']}</b>ü•≥\n",
                         parse_mode=ParseMode.HTML)


async def back_from_student_info_button_handler(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    if dialog_manager.dialog_data.get('chosen_homework') is None:
        await dialog_manager.switch_to(CheckHw.view_students)
    else:
        await dialog_manager.switch_to(CheckHw.students_to_check)


check_hw_dialog = Dialog(
    Window(
        Const("üìí –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n\n"
              "‚ùóÔ∏è –í—ã–±—Ä–∞–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞, –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å\n"
              " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –¥–æ–º–∞—à–∫–∞—Ö"),

        ScrollingGroup(
            Select(
                Format("{item}"),
                id="all_students",
                item_id_getter=lambda student: student,
                items="students_list",
                on_click=on_student_chosen,
            ),
            id="students_group",
            width=1,
            height=8,
            hide_on_single_page=True,
        ),
        Cancel(Const("–ó–∞–∫–æ–Ω—á–∏—Ç—å")),
        state=CheckHw.view_students,
        getter=students_getter
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"),
        Column(
            Select(
                Format("{item[1]}, –∂–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {item[2]}"),
                id="homeworks_to_check",
                item_id_getter=lambda homework: homework[0],
                items="homeworks_list",
                on_click=on_homework_chosen,
            )
        ),
        Cancel(Const("–ó–∞–∫–æ–Ω—á–∏—Ç—å")),
        state=CheckHw.homeworks_list,
        getter=homework_to_check_getter
    ),
    Window(
        Format("–°—Ç—É–¥–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–æ–º–∞—à–∫–∞ {dialog_data[chosen_homework_format]}"),
        ScrollingGroup(
            Select(
                Format("{item}"),
                id="students_by_hw",
                item_id_getter=lambda student: student,
                items="students_list",
                on_click=on_student_chosen,
            ),
            id="students_group_by_hw",
            width=1,
            height=8,
            hide_on_single_page=True,
        ),
        Row(
            Back(Const("–ù–∞–∑–∞–¥")),
            Cancel(Const("–ó–∞–∫–æ–Ω—á–∏—Ç—å"))
        ),
        state=CheckHw.students_to_check,
        getter=students_by_hw_getter
    ),
    Window(
        Format("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–∞—à–∫–∞—Ö –æ—Ç <b>@{dialog_data[chosen_student]}</b>\n"
               "–ú–æ–∂–µ—à—å –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ–º–∞—à–∫–∏.\n"),
        Const("‚ùóÔ∏è <b>–ß—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –¥–∑, –≤ <u>—Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</u> –≤–≤–µ–¥–∏ –æ—Ü–µ–Ω–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ</b>:\n"
              "<i>&lt;–Ω–æ–º–µ—Ä –¥–∑&gt; &lt;–æ—Ü–µ–Ω–∫–∞: –æ—Ç 0 –¥–æ 10&gt;</i>\n\n"
              "‚ùóÔ∏è <b>–û—Ü–µ–Ω–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä–æ–±–Ω–æ–π.</b>\n"
              "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
              "<i>3 3.25</i>\n\n"
              "‚ùóÔ∏è <b>–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –¥–æ–º–∞—à–∫—É</b>\n"),
        Url(Format("{hws_info[0][text]}"), Format("{hws_info[0][url]}")),
        Url(Format("{hws_info[1][text]}"), Format("{hws_info[1][url]}")),
        Url(Format("{hws_info[2][text]}"), Format("{hws_info[2][url]}")),
        Url(Format("{hws_info[3][text]}"), Format("{hws_info[3][url]}")),
        Url(Format("{hws_info[4][text]}"), Format("{hws_info[4][url]}")),
        Row(
            Button(
                Const("–ù–∞–∑–∞–¥"),
                id="back_button",
                on_click=back_from_student_info_button_handler),
            Cancel(Const("–ó–∞–∫–æ–Ω—á–∏—Ç—å"))
        ),
        MessageInput(check_hw_handler, content_types=[ContentType.TEXT]),
        state=CheckHw.hws_to_check,
        getter=chosen_student_hw_getter,
        parse_mode=ParseMode.HTML
    ),
)

router.include_router(check_hw_dialog)


class ExpelStates(StatesGroup):
    input = State()
    confirm = State()


async def input_expel_student_handler(message: Message, message_input: MessageInput, dialog_manager: DialogManager):
    student_username = message.text
    dialog_manager.dialog_data["student_to_expel"] = student_username
    await dialog_manager.next()


async def confirm_expel(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    student_username = dialog_manager.dialog_data.get("student_to_expel")
    username = callback.from_user.username
    try:
        response = requests.delete(settings.BACKEND_URL + f"/{slugify(username)}/expel/{stringify(student_username)}")
        response.raise_for_status()
    except ConnectionError as error:
        logging.error(error)
        await callback.message.answer(f"–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî\n–ù–∞–ø–∏—à–∏ {settings.ADMIN}.")
        await dialog_manager.done()
        return
    except HTTPError as error:
        if error.response.status_code == 404:
            await callback.message.answer(f"–ù–µ –≤–∏–∂—É —É —Ç–µ–±—è —Ç–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ü§®\n\n"
                                          f"/students")
        else:
            logging.error(error)
            await callback.message.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò≥. –ù–∞–ø–∏—à–∏ {settings.ADMIN}.")
        await dialog_manager.done()
        return

    del_from_redis(student_username)
    await callback.message.answer(f"–£—á–∞—Å—Ç–Ω–∏–∫ <b>@{student_username}</b> —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á—ë–Ω.",
                                  parse_mode=ParseMode.HTML)
    await dialog_manager.done()


expel_dialog = Dialog(
    Window(
        Const("‚ö†Ô∏è<b>DANGER ZONE</b>‚ö†Ô∏è\n\n"
              "–í–≤–µ–¥–∏ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (<u><b>–±–µ–∑ @</b></u>), –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç—å.\n\n"
              "‚ùóÔ∏è <b>–û–Ω –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è.</b>"),
        MessageInput(input_expel_student_handler, content_types=[ContentType.TEXT]),
        parse_mode=ParseMode.HTML,
        state=ExpelStates.input
    ),
    Window(
        Format("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫—É—Ä—Å–∞‚ùì\n\n"
               "‚ùóÔ∏è <b>–û–Ω –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è.</b>"),
        Button(Const("–î–∞"), id="confirm_yes", on_click=confirm_expel),
        Cancel(Const("–ù–µ—Ç")),
        state=ExpelStates.confirm,
        parse_mode=ParseMode.HTML
    )
)

router.include_router(expel_dialog)


@router.message(Command("statistics"))
async def get_statistics(message: types.Message, dialog_manager: DialogManager, command: CommandObject):
    if command.args is None:
        limit = 5
    else:
        args = command.args.split(" ")
        if len(args) > 1:
            await message.answer("/statistics <i>&lt;—á–∏—Å–ª–æ: –æ—Ç 1 –¥–æ 20&gt;</i>", parse_mode=ParseMode.HTML)
            return

        limit = args[0]
        try:
            limit = int(limit)
            if limit < 1 or limit > 20:
                raise ValueError
        except ValueError:
            await message.answer("/statistics <i>&lt;—á–∏—Å–ª–æ: –æ—Ç 1 –¥–æ 20&gt;</i>", parse_mode=ParseMode.HTML)
            return

    tutor_username = message.from_user.username
    response = await make_request_(settings.BACKEND_URL + f"/{slugify(tutor_username)}/statistic/{limit}", message)

    if not response:
        return

    statistics = response.json()
    students_statistics = []
    num = 1
    for statistic in statistics:
        if statistic['passed'] == -1:
            students_statistics.append(f"<b>{num}.</b> @{stringify(statistic['username'])}: "
                                       f"<i>—Å–¥–∞–Ω–æ</i>: <b>0</b>, "
                                       f"<i>—Å—Ä.–±–∞–ª–ª</i>: <b>0.0</b>, "
                                       f"<i>–ø—Ä–æ–µ–∫—Ç</i>: ‚ùå")
        else:
            project = f"{statistic['project']}‚úÖ" if statistic['project'] is not None else "‚ùå"
            students_statistics.append(f"<b>{num}.</b> @{stringify(statistic['username'])}: "
                                       f"<i>—Å–¥–∞–Ω–æ</i>: <b>{statistic['passed']}/{settings.TASKS}</b>, "
                                       f"<i>—Å—Ä.–±–∞–ª–ª</i>: <b>{round(max(statistic['average'], 0.0), 1)}</b>, "
                                       f"<i>–ø—Ä–æ–µ–∫—Ç</i>: <b>{project}</b>")
        num += 1

    await message.answer("üèÖ –†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
                         "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª-–≤—É <b>–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö</b> –¥–æ–º–∞—à–µ–∫, –∑–∞—Ç–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É.\n\n" +
                         '\n'.join(students_statistics) +
                         "\n\n/students - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", parse_mode=ParseMode.HTML)


@router.message(Command("students"))
async def get_students_list(message: types.Message, dialog_manager: DialogManager):
    await dialog_manager.start(CheckHw.view_students, mode=StartMode.RESET_STACK)


@router.message(Command("checkhw"))
async def start_sending_hw_dialog(message: types.Message, dialog_manager: DialogManager):
    await dialog_manager.start(CheckHw.homeworks_list, mode=StartMode.RESET_STACK)


@router.message(Command("expel"))
async def start_sending_hw_dialog(message: types.Message, dialog_manager: DialogManager, command: CommandObject):
    await dialog_manager.start(ExpelStates.input, mode=StartMode.RESET_STACK)
